package org.spoon.tracability.spoon.processors;

import org.slf4j.Logger;
import spoon.processing.AbstractProcessor;
import spoon.reflect.code.*;
import spoon.reflect.declaration.CtClass;
import spoon.reflect.declaration.CtField;
import spoon.reflect.declaration.CtMethod;
import spoon.reflect.declaration.ModifierKind;
import spoon.reflect.reference.CtTypeReference;

import java.util.Objects;
import java.util.Set;

public class ClassProcessor extends AbstractProcessor<CtClass> {
    private static final Logger logger = org.slf4j.LoggerFactory.getLogger(ClassProcessor.class);
    @Override
    public void process(CtClass ctClass) {
        final CtTypeReference<org.slf4j.Logger> loggerRef = getFactory().Code().createCtTypeReference(org.slf4j.Logger.class);
        final CtTypeReference<org.slf4j.LoggerFactory> loggerFactoryRef = getFactory().Code().createCtTypeReference(org.slf4j.LoggerFactory.class);

        final CtField<org.slf4j.Logger> loggerField = getFactory().Core().createField();
        loggerField.<CtField<org.slf4j.Logger>>setSimpleName("logger");
        loggerField.<CtField<org.slf4j.Logger>>setType(loggerRef);
        loggerField.<CtField<org.slf4j.Logger>>addModifier(ModifierKind.PRIVATE);
        loggerField.<CtField<org.slf4j.Logger>>addModifier(ModifierKind.STATIC);
        loggerField.<CtField<org.slf4j.Logger>>addModifier(ModifierKind.FINAL);

        final CtComment autoGeneratedComment = getFactory().createComment();
        autoGeneratedComment.setContent("Automatically generated by Spoon");
        loggerField.addComment(autoGeneratedComment);

        final String expression = loggerFactoryRef + ".getLogger(" + ctClass.getSimpleName() + ".class.getName())";
        final CtCodeSnippetExpression<org.slf4j.Logger> loggerExpression = getFactory().Code().createCodeSnippetExpression(expression);
        loggerField.setDefaultExpression(loggerExpression);

        String className = ctClass.getSimpleName();
        switch (className) {
            case "ProductServiceImpl":
                ctClass.addFieldAtTop(loggerField);
                addLogToMethod(ctClass.getMethods());
                if (!ctClass.getMethodsByName("getProductById").isEmpty()) {
                    CtMethod method = (CtMethod) ctClass.getMethodsByName("getProductById").get(0);

                    method.getBody().addStatement(method.getBody().getStatements().size() - 1, getFactory().Code().createCodeSnippetStatement("logger.info(\"product called {} price {}\",  productEntity.getName(), productEntity.getPrice());"));


                }
                break;
            case "UserServiceImpl":
                ctClass.addFieldAtTop(loggerField);
                final CtTypeReference<org.slf4j.MDC> mdcReference = getFactory().Code().createCtTypeReference(org.slf4j.MDC.class);
                final String mdcExpression = mdcReference + ".put(" + "\"user\"" + ", userToFound.getEmail()" + ")";
                final CtCodeSnippetExpression<org.slf4j.Logger> mdcExpressionSnippet = getFactory().Code().createCodeSnippetExpression(mdcExpression);
                final CtStatement mdcStatement = getFactory().Code().createCodeSnippetStatement(mdcExpressionSnippet.toString());
                addLogToMethod(ctClass.getMethods());
                if (!ctClass.getMethodsByName("authenticateUser").isEmpty()) {
                    CtMethod method = (CtMethod) ctClass.getMethodsByName("authenticateUser").get(0);
                    CtBlock methodBody = method.getBody();
                    for (int i = 0; i < methodBody.getStatements().size(); i++) {
                        CtStatement statement = methodBody.getStatements().get(i);
                        if (statement.toString().contains("if (userToFound.getPassword().equals(password)) {")) {
                            CtIf ifStatement = (CtIf) statement;
                            CtBlock thenBlock = ifStatement.getThenStatement();
                            thenBlock.insertBegin(mdcStatement);
                            thenBlock.insertBegin(getFactory().Code().createCodeSnippetStatement("logger.info(\"User authenticated\");"));
                        }
                    }
                }
                break;
            default:
                break;
        }
    }


    private void addLogToMethod(Set<CtMethod> methods) {
        methods.forEach(method -> {
            String methodName = method.getSimpleName();
            if (!methodName.equals("authenticateUser")) {
                String logStatement = "logger.info(\"" + methodName + " method called\")";
                CtStatement logStatementObject = getFactory().Code().createCodeSnippetStatement(logStatement);
                method.getBody().insertBegin(logStatementObject);
            }
        });
    }
}
